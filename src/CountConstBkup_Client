
import java.io.*;
import java.net.Socket;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import ut.Helper;


public class Client {

    public static int div = 32;
    static Properties config = Helper.readPropertiesFile("config/config.ini");
    static int numRows = Integer.parseInt(config.getProperty("num_rows"));
    static int p = (int) (numRows);
    public static long q = (long) p * div;

    private static final Logger log = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);


    public static long interpolate(long[] result1, long[] result2, int p, int numBits) {
        long value1 = (result1 != null && result1.length > 0) ? result1[0] : 0;
        long value2 = (result2 != null && result2.length > 0) ? result2[0] : 0;
        long difference = Math.abs(value1 - value2);
      // long result = ((difference%p)+p) % p;
       long result= difference;

        return result;
    }


    public static long[] sendToServer(Object data, ObjectOutputStream outputStream, ObjectInputStream inputStream) {
        long[] results = null;
        try {
            // sending data to server
            outputStream.writeObject(data);
            // receiving data from server
            results = (long[]) inputStream.readObject();
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return results;
    }


    public static int[] readFromServer(ObjectInputStream inputStream) {
        int[] results = null;
        try {
            // receiving data from server
            results = (int[]) inputStream.readObject();
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            log.log(Level.SEVERE, "Class not found when reading results: " + e.getMessage(), e);
        }
        return results;
    }


    public static long[] readFromServer3(ObjectInputStream inputStream) {
        long[] results = null;
        try {
            // receiving data from server
            results = (long[]) inputStream.readObject();
            System.out.println(results.length);
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            log.log(Level.SEVERE, "Class not found when reading results: " + e.getMessage(), e);
        }
        return results;
    }


    /**
     * Return number of rows matching the input query
     *
     * @throws IOException
     */

    public static void processQuery() throws IOException, ExecutionException, InterruptedException {
        // reading properties file for parameters
        Properties config = Helper.readPropertiesFile("config/config.ini");
        int numBits = Integer.parseInt(config.getProperty("num_bits"));
        int numRows = Integer.parseInt(config.getProperty("num_rows"));
        String csvFilePath = config.getProperty("csv_file_path");

        String server1IP = config.getProperty("server1_ip");
        int server1Port = Integer.parseInt(config.getProperty("server1_port"));
        String server2IP = config.getProperty("server2_ip");
        int server2Port = Integer.parseInt(config.getProperty("server2_port"));
        int iter = Integer.parseInt(config.getProperty("iteration"));


        // create sockets for servers
        Socket socketServer1 = new Socket(server1IP, server1Port);
        ObjectOutputStream outputStreamServer1 = new ObjectOutputStream(socketServer1.getOutputStream());
        ObjectInputStream inputStreamServer1 = new ObjectInputStream(socketServer1.getInputStream());

        Socket socketServer2 = new Socket(server2IP, server2Port);
        ObjectOutputStream outputStreamServer2 = new ObjectOutputStream(socketServer2.getOutputStream());
        ObjectInputStream inputStreamServer2 = new ObjectInputStream(socketServer2.getInputStream());

        // Ask for query input
        Scanner scanner = new Scanner(System.in);
        long[][] csvData = Helper.loadDataValues(csvFilePath, numRows, 2); // Assuming 2 columns

        ArrayList<Double> totalProcessingTimeList = new ArrayList<>();
        ArrayList<Double> totalNetworkTimeList = new ArrayList<>();
        for (int m = 0; m < iter; m++) {
            System.out.print("Enter your message: ");
            long query = Long.parseLong(scanner.nextLine());
            int query_org = (int) query;

            long correspondingValue = 0;

            // Find the corresponding value
            for (long[] row : csvData) {
                if (row[0] == query) {
                    correspondingValue = row[1]; // Get the second column's value
                    break;
                }
            }

            if (correspondingValue == 0) {
                System.out.println("Query not found in CSV");
                continue;
            }
            System.out.println("Query: " + query + ", Corresponding Value: " + correspondingValue);


            ArrayList<Instant> processingTime = new ArrayList<>();
            ArrayList<Instant> networkTime = new ArrayList<>();
            ExecutorService executor = Executors.newFixedThreadPool(2);

            @SuppressWarnings("unchecked")
            Future<long[]> futureServer1;
            Future<long[]> futureServer2;

            // Prepare tables T0/T1
            int[][] T0 = new int[numBits][2];
            int[][] T1 = new int[numBits][2];
            byte[][] T = new byte[numBits][2];
            Random random = new Random();
            int temp = numBits - 1;
            byte bitValue;
            int i;
            int q1=127;
            processingTime.add(Instant.now());

            for ( i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (1 - bitValue);

                for (int b = 0; b < 2; b++) {
                    byte currentBit = T[i][b];
                    int n = 100;
                    if (currentBit == 1) {
                        T0[i][b] = (byte) ((random.nextInt(n) + 1));
                        T1[i][b] = (byte) ((T0[i][b] - 1));
                    } else {
                        int[] z = {0, n};
                        int l = 1;
                        int totalValues = (n - l + 1 + 1);
                        int randomIndex = random.nextInt(totalValues);

                        if (randomIndex != 0) {
                            T0[i][b] = (byte) ((l + random.nextInt(n)));
                        } else {
                            T0[i][b] = (byte) (z[random.nextInt(z.length)]);
                        }

                        T1[i][b] = T0[i][b];
                    }
                }
                query >>= 1;

                //System.out.printf("T0[%d][0] = %d, T0[%d][1] = %d%n", i, T0[i][0], i, T0[i][1]);
                //System.out.printf("T1[%d][0] = %d, T1[%d][1] = %d%n", i, T1[i][0], i, T1[i][1]);
            }


           /* for (i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (bitValue ^ 1);
                for (int b = 0; b < 2; b++) {
                    T0[i][b] = (byte) (random.nextInt(100)); // random value between 0 and 126
                    T1[i][b] = (byte) ((T0[i][b] - T[i][b] + q1) % q1);
                    //if (T1[i][b] < 0) T1[i][b] += q;
                }
                query >>= 1;
            }*/

            processingTime.add(Instant.now());

            // Send T0 and T1 to their respective servers
            networkTime.add(Instant.now());
            futureServer1 = executor.submit(() -> sendToServer(T0, outputStreamServer1, inputStreamServer1));
            futureServer2 = executor.submit(() -> sendToServer(T1, outputStreamServer2, inputStreamServer2));

            // Receive results from servers
            long[] result1 = futureServer1.get();
            long[] result2 = futureServer2.get();
            networkTime.add(Instant.now());

            // Interpolate results
            processingTime.add(Instant.now());
            long interpolationResult = interpolate(result1, result2, numRows, numBits);
            processingTime.add(Instant.now());

            System.out.println("The number of items matching: " + interpolationResult);
            System.out.println("Processing time: " + Helper.getTotalTime(processingTime));
            totalProcessingTimeList.add(Helper.getTotalTime(processingTime));
            totalNetworkTimeList.add(Helper.getTotalTime(networkTime));

            executor.shutdown();
        }

        // Calculate Average Processing and Network Time
        double sumProcessingTime = 0;
        double sumNetworkTime = 0;
        for (double processingTime1 : totalProcessingTimeList) {
            sumProcessingTime += processingTime1;
        }
        for (double networkTime1 : totalNetworkTimeList) {
            sumNetworkTime += networkTime1;
        }

        double averageProcessingTime = sumProcessingTime / iter;
        double averageNetworkTime = sumNetworkTime / iter;
        System.out.println("Average processing time: " + averageProcessingTime);
        System.out.println("Average network time: " + averageNetworkTime);
    }

    public static void main(String[] args) throws IOException, ExecutionException, InterruptedException {
        // return number of rows matching the input query
        processQuery();
    }
}




