
import java.io.*;
import java.net.Socket;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import ut.Helper;



public class Client {

    public static int div = 32;
    static Properties config = Helper.readPropertiesFile("config/config.ini");
    static int numRows = Integer.parseInt(config.getProperty("num_rows"));
    static int p = numRows;
    public static int q = p*div;



    private static final Logger log = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    public static int interpolate(int[] result1, int[] result2, int[] result3, int numBits, int bits) {
        Properties config = Helper.readPropertiesFile("config/config.ini");
        int numRows = Integer.parseInt(config.getProperty("num_rows"));
        int p = numRows;
        int value1 = (result1 != null && result1.length > 0) ? result1[0] : 0;
        int value2 = (result2 != null && result2.length > 0) ? result2[0] : 0;
        int value3 = (result3 != null && result3.length > 0) ? result3[0] : 0;


        int result = Math.abs(value1 - value2) - value3;
        return (int) (result);
    }

    public static int[] sendToServer(Object data, ObjectOutputStream outputStream, ObjectInputStream  inputStream) {
        int[] results = null;
        try {
            // sending data to server
            outputStream.writeObject(data);
            // receiving data from server
            results = (int[]) inputStream.readObject();
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return results;
    }



    public static int[] readFromServer(ObjectInputStream inputStream) {
        int[] results = null;
        try {
            // receiving data from server
            results = (int[]) inputStream.readObject();
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            log.log(Level.SEVERE, "Class not found when reading results: " + e.getMessage(), e);
        }
        return results;
    }


    public static int[] readFromServer3(ObjectInputStream inputStream) {
        int[] results = null;
        try {
            // receiving data from server
            results = (int[]) inputStream.readObject();
            System.out.println(results.length);
        } catch (IOException ex) {
            log.log(Level.SEVERE, ex.getMessage());
        } catch (ClassNotFoundException e) {
            log.log(Level.SEVERE, "Class not found when reading results: " + e.getMessage(), e);
        }
        return results;
    }




    /**
     * Return number of rows matching the input query
     * @throws IOException
     */

    public static void processQuery() throws IOException, ExecutionException, InterruptedException {

        // reading properties file for parameters
        Properties config = Helper.readPropertiesFile("config/config.ini");
        int numBits = Integer.parseInt(config.getProperty("num_bits"));
        int numRows = Integer.parseInt(config.getProperty("num_rows"));
        String server1IP = config.getProperty("server1_ip");
        int server1Port = Integer.parseInt(config.getProperty("server1_port"));
        String server2IP = config.getProperty("server2_ip");
        int server2Port = Integer.parseInt(config.getProperty("server2_port"));
        String server3IP = config.getProperty("server3_ip");
        int server3Port = Integer.parseInt(config.getProperty("server3_port"));
        int iter = Integer.parseInt(config.getProperty("iteration"));

        // create sockets for server
        Socket socketServer1 = new Socket(server1IP, server1Port);
        ObjectOutputStream outputStreamServer1 = new ObjectOutputStream(socketServer1.getOutputStream());
        ObjectInputStream inputStreamServer1 = new ObjectInputStream(socketServer1.getInputStream());

        Socket socketServer2 = new Socket(server2IP, server2Port);
        ObjectOutputStream outputStreamServer2 = new ObjectOutputStream(socketServer2.getOutputStream());
        ObjectInputStream inputStreamServer2 = new ObjectInputStream(socketServer2.getInputStream());

        Socket socketServer3 = new Socket(server3IP, server3Port);
        ObjectOutputStream outputStreamServer3 = new ObjectOutputStream(socketServer3.getOutputStream());
        ObjectInputStream inputStreamServer3 = new ObjectInputStream(socketServer3.getInputStream());
        System.out.println("Server3");
        System.out.println("Local port:" + socketServer3.getLocalPort());
        System.out.println("Remote port:" + socketServer3.getPort());

        // Ask for query input
        Scanner scanner = new Scanner(System.in);
        ArrayList<Double> totalProcessingTimeList = new ArrayList<>();
        ArrayList<Double> totalNetworkTimeList = new ArrayList<>();
        for (int m = 0; m < iter; m++) {
            System.out.print("Enter your message: ");
            long query = Long.parseLong(scanner.nextLine());
            int query_org;
            query = query_org = 5;


            ArrayList<Instant> processingTime = new ArrayList<>();
            ArrayList<Instant> networkTime = new ArrayList<>();
            ExecutorService executor = Executors.newFixedThreadPool(2);

            @SuppressWarnings("unchecked")
            Future<int[]> futureServer1;
            Future<int[]> futureServer2;
            Future<int[]> futureServer3;


            // server tables T0/T1
            int[][] T0 = new int[numBits][2];
            int[][] T1 = new int[numBits][2];
            byte[][] T = new byte[numBits][2];

            // Prepare tables T0/T1 with random integers between 0 and 127
            processingTime.add(Instant.now());
            Random random = new Random();
            int temp = numBits - 1;
            byte bitValue;
            // int q = 136;


           /* System.out.println("Starting Mod DTT");
            Random random1 = new Random(); // Use any integer as a seed value
            for (int i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (bitValue ^ 1);
                processingTime.add(Instant.now());
                for (int b = 0; b < 2; b++) {
                    T0[i][b] = (int) (random1.nextInt(q));
                    T1[i][b] = (int) ((T0[i][b] - T[i][b] + q) % q);
                    query >>= 1;
                }
                // Prepare tables T0/T1 with random integers between 0 and 127
*/
            int n = 100;
            int[] z = {0, n};
            int l = 1;
            int totalValues = (n - l + 2);
            int randomIndex = random.nextInt(totalValues);
            //Constraint DTT
            System.out.println("Starting Constraint DTT");
            int q1 = 100;
            //Constraint DTT
            int i;
            for (i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (1 - bitValue);

                processingTime.add(Instant.now());
                for (int b = 0; b < 2; b++) {
                    byte currentBit = T[i][b];
                    if (currentBit == 1) {
                        T0[i][b] = (byte) ((random.nextInt(n) + 1));
                        T1[i][b] = (byte) ((T0[i][b] + 1));
                    } else {
                        if (randomIndex != 0) {
                            T0[i][b] = (byte) ((l + random.nextInt(n)));
                        } else {
                            T0[i][b] = (byte) (z[random.nextInt(z.length)]);
                        }
                        T1[i][b] = T0[i][b];
                    }
                }
                query >>= 1;

                processingTime.add(Instant.now());

             /*
             //Random random = new Random();
            for (int i = 0; i < numBits; i++) {
                T0[i][0] = (byte) (random.nextInt(100) + 1);
                T0[i][1] = (byte) (random.nextInt(100) + 1);
                T1[i][0] = T0[i][0];
                T1[i][1] = T0[i][1];
            }

            // Store query as additive shares in T0/T1
            processingTime.add(Instant.now());

            for (int i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T0[i][bitValue] -= 1;
                query >>= 1;
            }

*/


            }
            // Send T0/T1 shares to servers and get responses
            networkTime.add(Instant.now());
            boolean chooseServer = random.nextBoolean();
            // if (chooseServer) {
//                    futureServer1 = executor.submit(() -> new byte[][]{sendToServer(T0, outputStreamServer1, inputStreamServer1)});
//                    futureServer2 = executor.submit(() -> new byte[][]{sendToServer(T1, outputStreamServer2, inputStreamServer2)});
//                } else {
//                    futureServer1 = executor.submit(() -> new byte[][]{sendToServer(T0, outputStreamServer2, inputStreamServer2)});
//                    futureServer2 = executor.submit(() -> new byte[][]{sendToServer(T1, outputStreamServer1, inputStreamServer1)});
//             }

            chooseServer = true;

            futureServer1 = executor.submit(() -> sendToServer(T0, outputStreamServer1, inputStreamServer1));
            futureServer2 = executor.submit(() -> sendToServer(T1, outputStreamServer2, inputStreamServer2));


            //from Server 3
            futureServer3 = executor.submit(() -> readFromServer3(inputStreamServer3));

            // Wait for responses from Server 1 and Server 2

            // Waiting for threads to complete
            int[] result1 = futureServer1.get();
            int[] result2 = futureServer2.get();
            int[] result3 = futureServer3.get();
            networkTime.add(Instant.now());
            processingTime.add(Instant.now());

            //CALCULATION
            int interpolationResult = interpolate(result1, result2, result3, numRows, numBits);
            System.out.println("The number of items matching " + interpolationResult);


            processingTime.add(Instant.now());
            System.out.println("Processing time:" + Helper.getTotalTime(processingTime));
            totalProcessingTimeList.add(Helper.getTotalTime(processingTime));
            totalNetworkTimeList.add(Helper.getTotalTime(networkTime));

            executor.shutdown();
        }



        // Calculate Average Processing and Network Time
        double sumProcessingTime = 0;
        double sumNetworkTime = 0;
        for (double processingTime1 : totalProcessingTimeList) {
            sumProcessingTime += processingTime1;
        }
        for (double networkTime1 : totalNetworkTimeList) {
            sumNetworkTime += networkTime1;
        }

        double averageProcessingTime = sumProcessingTime / iter;
        double averageNetworkTime = sumNetworkTime / iter;
        System.out.println("Average processing time " + averageProcessingTime);
        System.out.println("Temporary network time " + averageNetworkTime);
    }

    public static void main(String[] args) throws IOException, ExecutionException, InterruptedException {
        processQuery();
    }
}

