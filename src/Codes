 // server tables T0/T1
            byte[][] T0 = new byte[numBits][2];
            byte[][] T1 = new byte[numBits][2];
            byte[][] T = new byte[numBits][2];
            Random random = new Random();


            // Prepare tables T0/T1 with random integers between 0 and 127
           processingTime.add(Instant.now());

            int temp = numBits - 1;
            byte bitValue;
            //Constraint DTT
            System.out.println("Starting Constraint DTT");

            for (int i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (1 - bitValue);

                for (int b = 0; b < 2; b++) {
                    byte currentBit = T[i][b];
                    int n = 100;
                    if (currentBit == 1) {
                        T0[i][b] = (byte) ((random.nextInt(n) + 1));
                        T1[i][b] = (byte) ((T0[i][b] - 1));
                    } else {
                        int[] z = {0, n};
                        int l = 1;
                        int totalValues = (n - l + 1 + 1);
                        int randomIndex = random.nextInt(totalValues);

                        if (randomIndex != 0) {
                            T0[i][b] = (byte) ((l + random.nextInt(n)));
                        } else {
                            T0[i][b] = (byte) (z[random.nextInt(z.length)]);
                        }

                        T1[i][b] = T0[i][b];
                    }
                }
                query >>= 1;
            }
            // Prepare tables T0/T1 with random integers between 0 and 127
             /* //Random random = new Random();
              for (int i = 0; i < numBits; i++) {
                T0[i][0] = (byte) (random.nextInt(100) + 1);
                T0[i][1] = (byte) (random.nextInt(100) + 1);
                T1[i][0] = T0[i][0];
                T1[i][1] = T0[i][1];
            }

            // Store query as additive shares in T0/T1
            processingTime.add(Instant.now());
            int temp = numBits - 1;
            byte bitValue;
            for (int i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T0[i][bitValue] -= 1;
                query >>= 1;
            }


*/


            //MOD DTT:

/* 
            for (int i = temp; i >= 0; i--) {
                bitValue = (byte) (query & 1);
                T[i][1] = bitValue;
                T[i][0] = (byte) (bitValue ^ 1);
                for (int b = 0; b < 2; b++) {
                    T0[i][b] = (byte) (random1.nextInt(100)); // random value between 0 and 126
                    T1[i][b] = (byte) ((T0[i][b] - T[i][b] + q1) % q1);
               
                }
                query >>= 1;
            }*/
